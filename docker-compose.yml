services:
  requirement_gathering_agent:
    build: ./requirement_gathering_agent
    environment:
      - RABBITMQ_HOST=rabbitmq
      - REQUIREMENTS_QUEUE=requirements_queue
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "5000:5000"
    networks:
      - ai_network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"

  requirements_analysis_agent:
    build: ./requirement_analysis_agent
    environment:
      - RABBITMQ_HOST=rabbitmq
      - REQUIREMENTS_QUEUE=requirements_queue
      - ANALYSIS_QUEUE=analysis_queue
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "5002:5002"

  sprint_planning_agent:
    build: ./sprint_planning_agent
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RABBITMQ_HOST=rabbitmq
      - ANALYSIS_QUEUE=analysis_queue
      - APPROVAL_QUEUE=approval_queue
      - FRONTEND_COMPONENT_QUEUE=frontend_component_queue
      - BACKEND_MICROSERVICE_QUEUE=backend_microservice_queue
      - DATABASE_SCHEMA_QUEUE=database_schema_queue
      - API_GATEWAY_QUEUE=api_gateway_queue
    networks:
      - ai_network
    ports:
      - "5003:5003"

  approval_agent:
    build: ./approval_agent
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RABBITMQ_HOST=rabbitmq
      - APPROVAL_QUEUE=approval_queue
      - FRONTEND_COMPONENT_QUEUE=frontend_component_queue
      - BACKEND_MICROSERVICE_QUEUE=backend_microservice_queue
      - DATABASE_SCHEMA_QUEUE=database_schema_queue
      - API_GATEWAY_QUEUE=api_gateway_queue
      - SPRINT_PLANNING_QUEUE=sprint_planning_queue
    ports:
      - "5004:5004"
    networks:
      - ai_network

  frontend_components_agent:
    build: ./frontend_components_agent
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RABBITMQ_HOST=rabbitmq
      - APPROVAL_QUEUE=approval_queue
      - FRONTEND_COMPONENT_QUEUE=frontend_component_queue
      - UNIT_TEST_QUEUE=unit_test_queue
    ports:
      - "5005:5005"
    networks:
      - ai_network

  backend_microservices_agent:
    build: ./backend_microservices_agent
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RABBITMQ_HOST=rabbitmq
      - APPROVAL_QUEUE=approval_queue
      - BACKEND_MICROSERVICE_QUEUE=backend_microservice_queue
      - UNIT_TEST_QUEUE=unit_test_queue

    networks:
      - ai_network

    ports:
      - "5006:5006"

  database_schema_agent:
    build: ./database_schema_agent
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RABBITMQ_HOST=rabbitmq
      - APPROVAL_QUEUE=approval_queue
      - DATABASE_SCHEMA_QUEUE=database_schema_queue
      - UNIT_TEST_QUEUE=unit_test_queue
    
    networks:
      - ai_network
    ports:
      - "5007:5007"

  api_gateway_agent:
    build: ./api_gateway_agent
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RABBITMQ_HOST=rabbitmq
      - APPROVAL_QUEUE=approval_queue
      - API_GATEWAY_QUEUE=api_gateway_queue
      - UNIT_TEST_QUEUE=unit_test_queue
    networks:
      - ai_network
    ports:
      - "5008:5008"

  unit_testing_agent:
    build: ./unit_testing_agent
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RABBITMQ_HOST=rabbitmq
      - APPROVAL_QUEUE=approval_queue
      - UNIT_TEST_QUEUE=unit_test_queue
      - FRONTEND_COMPONENT_QUEUE=frontend_component_queue
      - BACKEND_MICROSERVICE_QUEUE=backend_microservice_queue
      - DATABASE_SCHEMA_QUEUE=database_schema_queue
      - API_GATEWAY_QUEUE=api_gateway_queue
      - DEPLOYMENT_QUEUE=deployment_queue
    networks:
      - ai_network
    ports:
      - "5009:5009"

  deployment_automation_agent:
    build: ./deployment_automation_agent
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RABBITMQ_HOST=rabbitmq
      - UNIT_TEST_QUEUE=unit_test_queue
      - DEPLOYMENT_QUEUE=deployment_queue
    networks:
      - ai_network
    ports:
      - "5010:5010"

  logstash:
    build: ./logging
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/config/logstash.conf
    ports:
      - "5044:5044"
      - "9600:9600"

  kibana:
    build: ./kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"

  prometheus:
    build: ./prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"

  grafana:
    build: ./grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=grafanai  # Set your admin password
      - GF_USERS_ALLOW_SIGN_UP=false  # Disable user sign-up if not needed
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning  # Provisioning files for datasources, dashboards, etc.
      - ./grafana/config/grafana.ini:/etc/grafana/grafana.ini  # Custom Grafana configuration if needed

  jenkins:
    build: ./jenkins
    ports:
      - "8080:8080"
      - "50000:50000"
    environment:
      - JENKINS_OPTS=--prefix=/jenkins
      - JENKINS_ADMIN_USERNAME=admin
      - JENKINS_ADMIN_PASSWORD=admin
    volumes:
      - jenkins_home:/var/jenkins_home
      - ./jenkins/init.groovy.d:/usr/share/jenkins/ref/init.groovy.d

volumes:
  jenkins_home:

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
